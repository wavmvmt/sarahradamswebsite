<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Sarah's Cosmic Portal</title>
  <style>
    html, body {
      margin: 0;
      padding: 0;
      overflow: hidden;
      height: 100%;
      background: radial-gradient(ellipse at center, #fbdde3 0%, #dacdf2 40%, #a9b6f5 100%);
      font-family: 'Marcellus', serif;
      color: white;
    }

    canvas {
      display: block;
    }

    #title {
      position: absolute;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      font-size: 2em;
      text-shadow: 0 0 20px #fff;
      z-index: 2;
    }

    .particle {
      position: absolute;
      background: white;
      width: 2px;
      height: 2px;
      border-radius: 50%;
      opacity: 0.2;
      animation: float 30s infinite ease-in-out;
    }

    @keyframes float {
      0% {
        transform: translateY(0) translateX(0);
      }
      50% {
        transform: translateY(-20px) translateX(10px);
      }
      100% {
        transform: translateY(0) translateX(0);
      }
    }
  </style>
</head>
<body>
  <div id="title">Sarahâ€™s Cosmic Portal</div>
  <script src="https://cdn.jsdelivr.net/npm/three@0.160.1/build/three.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/three@0.160.1/examples/js/loaders/GLTFLoader.js"></script>
  <script>
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);
    camera.position.z = 10;

    const renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    const ambientLight = new THREE.AmbientLight(0xffffff, 1.2);
    scene.add(ambientLight);

    const sunGeometry = new THREE.SphereGeometry(1.2, 64, 64);
    const sunMaterial = new THREE.MeshBasicMaterial({ color: 0xFFBB33 });
    const sun = new THREE.Mesh(sunGeometry, sunMaterial);
    scene.add(sun);

    const loader = new THREE.GLTFLoader();

    const planetData = [
      { name: 'Mercury', file: 'Mercury_1_4878.glb', position: 2 },
      { name: 'Venus', file: 'Venus_1_12103.glb', position: 3 },
      { name: 'Earth', file: 'Earth_1_12756.glb', position: 4 },
      { name: 'Mars', file: '24881_Mars_1_6792.glb', position: 5 },
      { name: 'Jupiter', file: 'Jupiter.glb', position: 6.5 },
      { name: 'Saturn', file: 'Saturn_1_120536.glb', position: 8 },
      { name: 'Uranus', file: 'Uranus_1_51118.glb', position: 10 },
      { name: 'Neptune', file: 'Neptune.glb', position: 12 },
      { name: 'Pluto', file: 'Pluto_1_2374.glb', position: 13.5 },
      { name: 'Moon', file: 'moon.glb', position: 4.5 },
      { name: 'Chiron', file: 'planet.png', position: 11 }, // Use placeholder texture
      { name: 'Blackhole', file: 'black hole.glb', position: 16 }
    ];

    const planetMeshes = [];

    loader.setPath('./assets/models/');

    planetData.forEach((planet, index) => {
      loader.load(planet.file, gltf => {
        const model = gltf.scene;
        model.scale.set(0.4, 0.4, 0.4);
        model.position.x = planet.position;
        model.name = planet.name;
        scene.add(model);
        planetMeshes.push({ mesh: model, distance: planet.position });
      });
    });

    function addParticles(count = 50) {
      for (let i = 0; i < count; i++) {
        const p = document.createElement('div');
        p.className = 'particle';
        p.style.left = `${Math.random() * 100}%`;
        p.style.top = `${Math.random() * 100}%`;
        document.body.appendChild(p);
      }
    }

    addParticles();

    function animate() {
      requestAnimationFrame(animate);
      sun.scale.setScalar(1 + 0.02 * Math.sin(Date.now() * 0.001));

      planetMeshes.forEach((p, i) => {
        p.mesh.rotation.y += 0.002;
        const angle = Date.now() * 0.0001 + i;
        p.mesh.position.x = Math.cos(angle) * p.distance;
        p.mesh.position.z = Math.sin(angle) * p.distance;
      });

      renderer.render(scene, camera);
    }

    animate();

    window.addEventListener('resize', () => {
      camera.aspect = window.innerWidth/window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    });
  </script>
</body>
</html>
